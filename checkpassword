#!/usr/bin/env python
import ldap
import sys
import os
from hashlib import sha512
from redis import StrictRedis
from traceback import print_exc
from settings import *

def NOAUTH():
    sys.exit(1)

def NOEXIST():
    sys.exit(3)

def ERROR():
    sys.exit(111)

class User(object):

    def __init__(self,user,domain,passwd,userdb):
        self.user = user
        self.domain = domain
        self.passwd = passwd
        self.userdb = userdb
        self.getAttributes() # check redis then ldap for attributes
        if self.userdb:
            user,domain = self.mail.split('@')
            os.environ['AUTHORIZED'] = '2'
            os.environ['USER'] = self.mail
            os.environ['HOME'] = '/var/vmail/%s/%s' % (domain, self.user)
            os.environ['userdb_uid'] = 'vmail'
            os.environ['userdb_gid'] = 'vmail'
            try:
                os.environ['userdb_quota_rule'] = '*:storage=%sM' % self.maxStorage
                os.environ['EXTRA'] = 'userdb_quota_rule userdb_uid userdb_gid'
            except AttributeError:
                os.environ['EXTRA'] = 'userdb_uid userdb_gid'
            os.system(sys.argv[1])
            sys.exit(2)
        else:
            self.login() # check local hash then ldap for auth
            user,domain = self.mail.split('@')
            os.environ['USER'] = self.mail
            os.environ['HOME'] = '/var/vmail/%s/%s' % (domain, self.user)
            os.environ['userdb_uid'] = 'vmail'
            os.environ['userdb_gid'] = 'vmail'
            try:
                os.environ['userdb_quota_rule'] = '*:storage=%sM' % self.maxStorage
                os.environ['EXTRA'] = 'userdb_quota_rule userdb_uid userdb_gid'
            except AttributeError:
                os.environ['EXTRA'] = 'userdb_uid userdb_gid'
            os.system(sys.argv[1])

    def getAttributes(self):
        r = StrictRedis()
        self.r = r
        data = r.hgetall(self.user)
        if 'dn' in data:
            self.mail = data['mail'] 
            if self.domain != '*' and self.mail != '%s@%s' % (self.user,self.domain):
                NOEXIST()
            self.dn = data['dn'] 
            try:
                self.maxStorage = data['maxStorage']
            except KeyError:
                pass
            try:
                self.salt,self.hash = data['hash'].split('$')
            except KeyError:
                pass
            return

        l = ldap.initialize(server)
        self.l = l
        l.set_option(ldap.OPT_REFERRALS, 0)
        l.simple_bind_s(binduser,bindpasswd)
        strfilterf = strfilter.format(user=self.user,domain=self.domain)

        result_id = l.search(base, 2, strfilterf, ['mail','maxStorage'])
        result_type, result_data = l.result(result_id, timeout)
        if result_data != []:
            self.dn = result_data[0][0]
            self.mail = result_data[0][1]['mail'][0]
            try:
                self.maxStorage = result_data[0][1]['maxStorage'][0]
            except KeyError:
                pass
        else:
            self.r.delete(self.user)
            NOEXIST()

    def login(self):
        if self.passwd == "":
            NOAUTH()
        try:
            if sha512(self.passwd+self.salt).digest().encode('base_64') == self.hash:
                return
        except AttributeError:
            pass
        try:
            self.l.simple_bind_s(self.dn,self.passwd)
        except AttributeError:
            l = ldap.initialize(server)
            self.l = l
            l.set_option(ldap.OPT_REFERRALS, 0)
            try:
                l.simple_bind_s(self.dn,self.passwd)
            except ldap.INVALID_CREDENTIALS:
                NOAUTH()
        except ldap.INVALID_CREDENTIALS:
            NOAUTH()
        salt = os.urandom(16).encode('base_64')
        strhash = sha512(self.passwd+salt).digest().encode('base_64')
        pipe = self.r.pipeline()
        try:
            pipe.hmset(self.user,{'dn':self.dn,'mail':self.mail,'maxStorage':
                self.maxStorage,'hash': '%s$%s' % (salt, strhash)})
        except AttributeError:
            pipe.hmset(self.user,{'dn':self.dn,'mail':self.mail,
                'hash': '%s$%s' % (salt, strhash)})
        pipe.expire(self.user,86400)
        pipe.execute()
        
userdb = 'AUTHORIZED' in os.environ

# close stdin and get parameters
os.fdopen(3).close()
user = os.environ['AUTH_USERNAME']
try:
    domain = os.environ['AUTH_DOMAIN']
except KeyError:
    domain = '*'
try:
    passwd = os.environ['AUTH_PASSWORD']
except KeyError:
    passwd = None 

try:
    User(user,domain,passwd,userdb)
except SystemExit:
    raise
except:
    with open('/tmp/err.log','a') as f:
        print_exc(file=f)
    ERROR()
